import os
import random
import logging
import re
from typing import Any, TypedDict
import requests
from vacore import VACore

modname = os.path.basename(__file__)[:-3]  # calculating modname
logger = logging.getLogger(modname)

def start(core: VACore):
    manifest = {
        'name': '–ü–ª–∞–≥–∏–Ω –¥–ª—è Home Assistant',
        'version': '0.2',
        'require_online': True,

        'default_options': {
            'hassio_url': 'http://hassio.lan:8123/',
            'hassio_key': '',  # –ø–æ–ª—É—á–∏—Ç—å –≤ /profile, '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞'
            'default_reply': ['–•–æ—Ä–æ—à–æ', '–í—ã–ø–æ–ª–Ω—è—é', '–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ'],
            # –æ—Ç–≤–µ—Ç–∏—Ç—å –µ—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'ttsreply(—Ç–µ–∫—Å—Ç)'
            'totem': 'üé§',
            # Unicode —Å–∏–º–≤–æ–ª –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò—Ä–∏–Ω–µ —Å–µ–Ω—Å–æ—Ä–æ–≤, –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤.
        },

        'commands': {
            '–≤–∫–ª—é—á–∏': hassio_call('switch_on'),
            '–≤—ã–∫–ª—é—á–∏': hassio_call('switch_off'),
            '—Ö–æ—á—É|—Å–¥–µ–ª–∞–π|—è –±—É–¥—É': hassio_call('script'),
            '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞|–∑–∞–≥—Ä—É–∑–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞|–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —Ö–æ—É–º|–∑–∞–≥—Ä—É–∑–∏ —Ö–æ—É–º': hassio_call('reload'),
            '–∫–∞–∫–∞—è': hassio_call('sensor'),
        }
    }

    return manifest

def start_with_options(core: VACore, manifest: dict):
    core.hassio = _HomeAssistant(core.plugin_options(modname), core)
    core.hassio.reload()

def hassio_call(method):
    def decorator(core: VACore, phrase: str):
        # –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –æ–±—ä–µ–∫—Ç —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not hasattr(_HomeAssistant, 'instance'):
            raise RuntimeError('HomeAssistant not initialized')
        ha = _HomeAssistant.instance
        if not hasattr(ha, f'call_{method}'):
            raise NotImplementedError(f'{method} call not implemented')
        return getattr(ha, f'call_{method}')(phrase)

    return decorator

class _HomeAssistant:
    entities: TypedDict('EntitiesNameMap', {'switch': dict[str, str], 'sensor': dict[str, str]})
    scripts: dict[str, TypedDict('ScriptDomain', {'name': str, 'description': str, })]

    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, 'instance'):
            cls.instance = super(_HomeAssistant, cls).__new__(cls)
        return cls.instance

    def __init__(self, options: dict[str, Any], core: VACore):
        if not options['hassio_url']:
            core.play_voice_assistant_speech('–ù–µ –∑–∞–¥–∞–Ω —É—Ä–ª —Ö–æ—É–º –∞—Å—Å–∏—Å—Ç–∞–Ω—Ç–∞, –Ω–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è')
            logger.error('Hassio url not set')
            raise AttributeError('Hassio url not set')
        if not options['hassio_key']:
            core.play_voice_assistant_speech('–ù–µ –∑–∞–¥–∞–Ω –∫–ª—é—á –∞–ø–∏ —Ö–æ—É–º –∞—Å—Å–∏—Å—Ç–∞–Ω—Ç–∞, –Ω–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è')
            logger.error('Hassio api key not set')
            raise AttributeError('Hassio api key not set')
        self.url = options['hassio_url'].strip().rstrip('/')
        self.api_key = options['hassio_key'].strip()
        self.default_replies = options['default_reply']
        self.totem = options['totem']
        self.va_core = core

        # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ pymorphy2 –æ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–≤–∞
        try:
            import pymorphy2
            self.morph = pymorphy2.MorphAnalyzer()
        except ImportError:
            self.morph = None

    def request(self, path: str, method: str = 'GET', **kwargs):
        if not kwargs.get('headers'):
            kwargs['headers'] = {}
        kwargs['headers'].update({'Authorization': 'Bearer ' + self.api_key})
        try:
            res = requests.request(method, f'{self.url}/api/{path.lstrip("/")}', **kwargs)
            res.raise_for_status()
            return res.json()
        except Exception as e:
            self.say_if_va('–ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ö–æ—É–º –∞—Å—Å–∏—Å—Ç–∞–Ω—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
            logger.exception(f'Request {path} exception: {type(e)}')
            import traceback
            traceback.print_exc()

    def call_script(self, phrase):
        no_script = True
        phrase += self.totem
        phrase = self.prepare_phrase(phrase)
        for script in self.scripts:
            if str(self.scripts[script]['name']) == phrase:  # –∏—â–µ–º —Å–∫—Ä–∏–ø—Ç —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∏–º–µ–Ω–µ–º
                self.request(f'services/script/{script}', 'POST')
                script_desc = str(
                    self.scripts[script]['description'])  # –±–æ–Ω—É—Å: –∏—â–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
                if 'ttsreply(' in script_desc and ')' in script_desc.split('ttsreply(')[1]:  # –æ–±—Ö–æ–¥–∏–º—Å—è –±–µ–∑ re :^)
                    self.say_if_va(script_desc.split('ttsreply(')[1].split(')')[0])
                else:  # –µ—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    self.default_reply()
                no_script = False
                break
        if no_script:
            self.say_if_va('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è')

    def call_switch_on(self, phrase):
        phrase += self.totem
        phrase = self.prepare_phrase(phrase)
        if phrase not in self.entities['switch']:
            self.say_if_va('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        if self.request('services/switch/turn_on', 'POST', json={
            'entity_id': self.entities['switch'][phrase]
        }) is not None:
            self.default_reply()

    def call_switch_off(self, phrase):
        phrase += self.totem
        phrase = self.prepare_phrase(phrase)
        if phrase not in self.entities['switch']:
            self.say_if_va('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        elif self.request('services/switch/turn_off', 'POST', json={
            'entity_id': self.entities['switch'][phrase]
        }) is not None:
            self.default_reply()

    def call_sensor(self, phrase):
        phrase += self.totem
        phrase = self.prepare_phrase(phrase)
        if phrase not in self.entities['sensor']:
            self.say_if_va('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
            print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            return None
        state = self.request(f'states/{self.entities["sensor"][phrase]}')
        if not state:
            self.say_if_va('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        state_type = state.get('attributes', {}).get('device_class')
        val = int(float(state["state"]))
        if state_type in ('temperature', 'humidity'):
            sensor_name = state.get("attributes").get("friendly_name", phrase)
            sensor_name = re.sub(r'[^–∞-—è–ê-–Ø—ë–Å\s]', '', sensor_name)
            self.say_if_va(f'{sensor_name} —Å–µ–π—á–∞—Å {self.num2text(val)}'
                           f' {self.unit_of_measurement(state.get("attributes", {}).get("unit_of_measurement"), val)}')
        elif state_type == 'battery':
            sensor_name = state.get("attributes").get("friendly_name", phrase)
            sensor_name = re.sub(r'[^–∞-—è–ê-–Ø—ë–Å\s]', '', sensor_name)
            self.say_if_va(
                f'–∑–∞—Ä—è–¥ {sensor_name} —Å–µ–π—á–∞—Å {self.num2text(val)}'
                f' {self.unit_of_measurement(state.get("attributes", {}).get("unit_of_measurement"), val)}')
        else:
            self.say_if_va('–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')

    def call_reload(self, phrase):
        self.reload()
        not_found = False
        for entity, name in {'switch': '–í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏', 'sensor': '–°–µ–Ω—Å–æ—Ä—ã'}.items():
            if not self.entities[entity]:
                not_found = True
                self.say_if_va(f'{name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        if not self.scripts:
            not_found = True
            self.say_if_va('–°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        if not not_found:
            self.say_if_va('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä+—É–∂–µ–Ω—ã')

    def reload(self):
        # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        services = self.request('services')
        for service in services:  # –∏—â–µ–º —Å–∫—Ä–∏–ø—Ç—ã —Å—Ä–µ–¥–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            if service['domain'] == 'script':
                self.scripts = service['services']

                # –Ω–æ—Ä–º–∞–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
                for script in self.scripts:
                    self.scripts[script]['name'] = self.prepare_phrase(self.scripts[script]['name'])
                print('')
                print('---------–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤---------')
                for script in self.scripts:
                    if self.scripts[script]['name']:
                        print(self.scripts[script]['name'])
                break
        self.entities = {
            'switch': {},
            'sensor': {},
        }
        # –∑–∞–≥—Ä—É–∂–∞–µ–º states
        states = self.request('states')
        for state in states:
            for entity_type in ['switch', 'sensor']:
                if state['entity_id'].startswith(f'{entity_type}.'):
                    if not state.get('attributes', {}).get('friendly_name'):
                        # —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –∏–º–µ–Ω–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                        continue
                    clean_name = self.prepare_phrase(state['attributes']['friendly_name'])
                    if not clean_name:
                        # —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                        continue
                    if self.entities[entity_type].get(clean_name):
                        self.say_if_va(f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–æ –¥–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∏–º–µ–Ω–µ–º '
                                       f'{state["attributes"]["friendly_name"]} '
                                       f'–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π')
                        logger.warning(f'Multiple friendly name {state["attributes"]["friendly_name"]}')
                    self.entities[entity_type][clean_name] = state['entity_id']
                    break
        print('')
        print('---------–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤---------')
        if self.entities["sensor"]:
            for name, id in self.entities["sensor"].items():
                print(f"{name}")
        print('')
        print('------–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π--------')
        if self.entities["switch"]:
            for name, id in self.entities["switch"].items():
                print(f"{name}")
        print('')
        print('---------------------------------------------')

    def default_reply(self):
        self.say_if_va(self.default_replies[random.randint(0, len(self.default_replies) - 1)])

    def say_if_va(self, phrase):
        if self.va_core.va:
            self.va_core.play_voice_assistant_speech(phrase)

    def prepare_phrase(self, phrase):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ "totem"
        if self.totem not in phrase:
            phrase = ""
        else:
            #–∏–∑–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å  mystem
            #if self.mystem:
            if self.morph:
                phrase = re.sub(r'[^–∞-—è–ê-–Ø—ë–Å\s]', '', phrase)
                phrase = ' '.join(
                    self.morph.parse(word.lower())[0].normal_form for word in re.split(r'\W+', phrase) if word.strip())
                # –∏–∑–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å  mystem
                #phrase = ' '.join(lem.strip().lower() for lem in self.mystem.lemmatize(phrase) if lem.strip())
                return phrase
            else:
                phrase = re.sub(r'[^–∞-—è–ê-–Ø—ë–Å\s]', '', phrase)
                phrase = phrase.strip().lower()
                return phrase

    @staticmethod
    def unit_of_measurement(key, value):
        forms = {
            '¬∞C': ['–≥—Ä–∞–¥—É—Å', '–≥—Ä–∞–¥—É—Å–∞', '–≥—Ä–∞–¥—É—Å–æ–≤'],
            '%': ['–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'],
            '¬∞F': ['—Ñ–∞—Ä–µ–Ω–≥–µ–π—Ç', '—Ñ–∞—Ä–µ–Ω–≥–µ–π—Ç–∞', '—Ñ–∞—Ä–µ–Ω–≥–µ–π—Ç–æ–≤'],

        }.get(key)
        if not forms:
            return key

        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
        remainder10 = value % 10
        remainder100 = value % 100

        if 11 <= remainder100 <= 19:
            return forms[2]
        elif remainder10 == 1:
            return forms[0]
        elif 2 <= remainder10 <= 4:
            return forms[1]
        else:
            return forms[2]

    @staticmethod
    def num2text(num, main_units=((u'', u'', u''), 'm')):
        """
        author Sergey Prokhorov (https://github.com/seriyps/ru_number_to_text)
        """
        units = (
            u'–Ω–æ–ª—å',
            (u'–æ–¥–∏–Ω', u'–æ–¥–Ω–∞'),
            (u'–¥–≤–∞', u'–¥–≤–µ'),
            u'—Ç—Ä–∏', u'—á–µ—Ç—ã—Ä–µ', u'–ø—è—Ç—å',
            u'—à–µ—Å—Ç—å', u'—Å–µ–º—å', u'–≤–æ—Å–µ–º—å', u'–¥–µ–≤—è—Ç—å'
        )

        teens = (
            u'–¥–µ—Å—è—Ç—å', u'–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å',
            u'–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', u'—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å',
            u'—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', u'–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å',
            u'—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', u'—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å',
            u'–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', u'–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å'
        )

        tens = (
            teens,
            u'–¥–≤–∞–¥—Ü–∞—Ç—å', u'—Ç—Ä–∏–¥—Ü–∞—Ç—å',
            u'—Å–æ—Ä–æ–∫', u'–ø—è—Ç—å–¥–µ—Å—è—Ç',
            u'—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', u'—Å–µ–º—å–¥–µ—Å—è—Ç',
            u'–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', u'–¥–µ–≤—è–Ω–æ—Å—Ç–æ'
        )

        hundreds = (
            u'—Å—Ç–æ', u'–¥–≤–µ—Å—Ç–∏',
            u'—Ç—Ä–∏—Å—Ç–∞', u'—á–µ—Ç—ã—Ä–µ—Å—Ç–∞',
            u'–ø—è—Ç—å—Å–æ—Ç', u'—à–µ—Å—Ç—å—Å–æ—Ç',
            u'—Å–µ–º—å—Å–æ—Ç', u'–≤–æ—Å–µ–º—å—Å–æ—Ç',
            u'–¥–µ–≤—è—Ç—å—Å–æ—Ç'
        )

        orders = (  # plural forms and gender
            ((u'—Ç—ã—Å—è—á–∞', u'—Ç—ã—Å—è—á–∏', u'—Ç—ã—Å—è—á'), 'f'),
            ((u'–º–∏–ª–ª–∏–æ–Ω', u'–º–∏–ª–ª–∏–æ–Ω–∞', u'–º–∏–ª–ª–∏–æ–Ω–æ–≤'), 'm'),
            ((u'–º–∏–ª–ª–∏–∞—Ä–¥', u'–º–∏–ª–ª–∏–∞—Ä–¥–∞', u'–º–∏–ª–ª–∏–∞—Ä–¥–æ–≤'), 'm'),
        )

        minus = u'–º–∏–Ω—É—Å'

        def thousand(rest, sex):
            """Converts numbers from 19 to 999"""
            prev = 0
            plural = 2
            name = []
            use_teens = rest % 100 >= 10 and rest % 100 <= 19
            if not use_teens:
                data = ((units, 10), (tens, 100), (hundreds, 1000))
            else:
                data = ((teens, 10), (hundreds, 1000))
            for names, x in data:
                cur = int(((rest - prev) % x) * 10 / x)
                prev = rest % x
                if x == 10 and use_teens:
                    plural = 2
                    name.append(teens[cur])
                elif cur == 0:
                    continue
                elif x == 10:
                    name_ = names[cur]
                    if isinstance(name_, tuple):
                        name_ = name_[0 if sex == 'm' else 1]
                    name.append(name_)
                    if cur >= 2 and cur <= 4:
                        plural = 1
                    elif cur == 1:
                        plural = 0
                    else:
                        plural = 2
                else:
                    name.append(names[cur - 1])
            return plural, name

        _orders = (main_units,) + orders
        if num == 0:
            return ' '.join((units[0], _orders[0][0][2])).strip()  # –Ω–æ–ª—å

        rest = abs(num)
        ord = 0
        name = []
        while rest > 0:
            plural, nme = thousand(rest % 1000, _orders[ord][1])
            if nme or ord == 0:
                name.append(_orders[ord][0][plural])
            name += nme
            rest = int(rest / 1000)
            ord += 1
        if num < 0:
            name.append(minus)
        name.reverse()
        return ' '.join(name).strip()